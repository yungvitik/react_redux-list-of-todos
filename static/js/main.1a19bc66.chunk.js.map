{"version":3,"sources":["store/selectedUser.ts","api/api.ts","store/todos.ts","store/index.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["CHANGE_USER","CLEAR_USER","changeUser","id","dispatch","type","payload","changeUserId","clearUser","initialState","selectedUserReducer","state","action","API_URL","todosTypeActions","LOAD_TODOS","SHOW_COMPLETED","SHOW_ACTIVE","SHOW_ALL","DELETE_TODO","FILTER_TODOS","todos","visibleTodos","filterSettings","actionCreator","query","todoId","loadTodos","fetch","then","response","json","sort","a","b","userId","result","todosReducer","actions","filter","todo","completed","title","toLowerCase","includes","getVisibleTodos","getSelectedUserId","selectedUserId","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","connector","connect","useState","setQuery","useDispatch","useCallback","debounce","searchQuery","useEffect","className","placeholder","value","onChange","event","target","actionType","filterTodos","map","classNames","htmlFor","name","readOnly","button","onClick","toString","currentUserId","currentUser","setCurrentUser","catch","user","email","phone","App","useSelector","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a19bc66.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\nimport { Dispatch } from 'react';\n\nconst CHANGE_USER = 'CHANGE_USER';\nconst CLEAR_USER = 'CLEAR_USER';\n\ntype SelectedUser = {\n  selectedUserId: number;\n};\n\nconst changeUserId = (id: number) => ({ type: CHANGE_USER, payload: id });\nconst clearUserId = () => ({ type: CLEAR_USER });\n\nexport const changeUser = (id: number) => {\n  return (dispatch: Dispatch<{ type: string, payload: number }>) => dispatch(changeUserId(id));\n};\n\nexport const clearUser = () => {\n  return (dispatch: Dispatch<{ type: string }>) => dispatch(clearUserId());\n};\n\nconst initialState: SelectedUser = {\n  selectedUserId: 0,\n};\n\nconst selectedUserReducer = (state = initialState.selectedUserId, action: AnyAction) => {\n  switch (action.type) {\n    case CHANGE_USER:\n      return action.payload;\n    case CLEAR_USER:\n      return 0;\n    default:\n      return state;\n  }\n};\n\nexport default selectedUserReducer;\n","export const API_URL = 'https://mate.academy/students-api';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json())\n    .then(todos => todos.sort((a: Todo, b: Todo) => a.userId - b.userId));\n}\n\nexport function getCurrentUser(id: number): Promise<User> {\n  return fetch(`${API_URL}/users/${id}`)\n    .then(response => response.json())\n    .catch(() => ({\n      id: 0,\n      name: '',\n    }))\n    .then(user => user);\n}\n","import { AnyAction } from 'redux';\nimport { Dispatch } from 'react';\nimport { getTodos } from '../api/api';\n\nexport const todosTypeActions = {\n  LOAD_TODOS: 'LOAD_TODOS',\n  SHOW_ACTIVE: 'LOAD_ACTIVE',\n  SHOW_COMPLETED: 'LOAD_COMPLETED',\n  SHOW_ALL: 'SHOW_ALL',\n  DELETE_TODO: 'DELETE_TODO',\n  FILTER_TODOS: 'FILTER_TODOS',\n};\n\nconst {\n  LOAD_TODOS,\n  SHOW_COMPLETED,\n  SHOW_ACTIVE,\n  SHOW_ALL,\n  DELETE_TODO,\n  FILTER_TODOS,\n} = todosTypeActions;\n\ntype Todos = {\n  todos: Todo[];\n  visibleTodos: Todo[];\n  filterSettings: string;\n};\n\nconst initialState: Todos = {\n  todos: [],\n  visibleTodos: [],\n  filterSettings: todosTypeActions.SHOW_ALL,\n};\n\nexport const actionCreator = {\n  loadAllTodos: (todos: Todo[]) => ({ type: LOAD_TODOS, payload: todos }),\n  showAllTodos: (query: string) => ({ type: SHOW_ALL, payload: query }),\n  showActiveTodos: (query: string) => ({ type: SHOW_ACTIVE, payload: query }),\n  showCompletedTodos: (query: string) => ({ type: SHOW_COMPLETED, payload: query }),\n  deleteTodo: (todoId: number) => ({ type: DELETE_TODO, payload: todoId }),\n  filterTodos: (query: string) => {\n    return ({ type: FILTER_TODOS, payload: query });\n  },\n};\n\nexport const loadTodos = () => {\n  return (dispatch : Dispatch<{ type: string, payload: Todo[] }>) => getTodos()\n    .then(result => dispatch(actionCreator.loadAllTodos(result)));\n};\n\nconst todosReducer = (state = initialState, actions: AnyAction) => {\n  switch (actions.type) {\n    case LOAD_TODOS:\n      return {\n        filterSettings: todosTypeActions.SHOW_ALL,\n        todos: [...actions.payload],\n        visibleTodos: [...actions.payload],\n      };\n    case SHOW_ACTIVE:\n      return {\n        ...state,\n        filterSettings: todosTypeActions.SHOW_ACTIVE,\n        visibleTodos: state.todos\n          .filter(todo => !todo.completed\n            && todo.title.toLowerCase().includes(actions.payload.toLowerCase())),\n      };\n    case SHOW_COMPLETED:\n      return {\n        ...state,\n        filterSettings: todosTypeActions.SHOW_COMPLETED,\n        visibleTodos: state.todos\n          .filter(todo => todo.completed\n            && todo.title.toLowerCase().includes(actions.payload.toLowerCase())),\n      };\n    case SHOW_ALL:\n      return {\n        ...state,\n        filterSettings: SHOW_ALL,\n        visibleTodos: state.todos\n          .filter(todo => todo.title.toLowerCase().includes(actions.payload.toLowerCase())),\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== actions.payload),\n        visibleTodos: state.visibleTodos.filter(todo => todo.id !== actions.payload),\n      };\n    case FILTER_TODOS:\n      return {\n        ...state,\n        visibleTodos: state.todos\n          .filter(todo => todo.title.toLowerCase().includes(actions.payload.toLowerCase()))\n          .filter(todo => {\n            if (state.filterSettings === SHOW_ACTIVE && todo.completed) {\n              return false;\n            }\n\n            if (state.filterSettings === SHOW_COMPLETED && !todo.completed) {\n              return false;\n            }\n\n            return true;\n          }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport selectedUserReducer from './selectedUser';\nimport todosReducer from './todos';\n\nexport type RootState = {\n  selectedUserId: number;\n  todos: {\n    todos: Todo[];\n    visibleTodos: Todo[];\n    filterSettings: string;\n  }\n};\n\nexport const getVisibleTodos = (state: RootState) => state.todos.visibleTodos;\nexport const getSelectedUserId = (state: RootState) => state.selectedUserId;\nexport const getFilterSettings = (state: RootState) => state.todos.filterSettings;\n\nconst reducer = combineReducers({\n  selectedUserId: selectedUserReducer,\n  todos: todosReducer,\n});\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport classNames from 'classnames';\nimport { debounce } from 'lodash';\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\nimport { RootState, getVisibleTodos, getSelectedUserId } from '../../store';\nimport { changeUser, clearUser } from '../../store/selectedUser';\nimport './TodoList.scss';\nimport {\n  loadTodos,\n  todosTypeActions,\n  actionCreator,\n} from '../../store/todos';\n\nconst mapState = (state: RootState) => {\n  return {\n    todos: getVisibleTodos(state),\n    selectedUserId: getSelectedUserId(state),\n  };\n};\n\nconst connector = connect(mapState);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst TodoList: React.FC<Props> = ({\n  selectedUserId,\n  todos,\n}) => {\n  const [query, setQuery] = useState('');\n  const dispatch = useDispatch();\n  const filter = useCallback(\n    debounce((searchQuery: string) => dispatch(actionCreator.filterTodos(searchQuery)), 1000),\n    [],\n  );\n\n  useEffect(() => {\n    dispatch(loadTodos());\n  }, []);\n\n  const selectUserId = (id: number) => {\n    if (id !== selectedUserId) {\n      dispatch(changeUser(id));\n    } else {\n      dispatch(clearUser());\n    }\n  };\n\n  const filterTodos = (actionType: string) => {\n    switch (actionType) {\n      case todosTypeActions.SHOW_ALL:\n        dispatch(actionCreator.showAllTodos(query));\n        break;\n      case todosTypeActions.SHOW_ACTIVE:\n        dispatch(actionCreator.showActiveTodos(query));\n        break;\n      case todosTypeActions.SHOW_COMPLETED:\n        dispatch(actionCreator.showCompletedTodos(query));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <div className=\"TodoList__control\">\n        <input\n          className=\"TodoList__input\"\n          type=\"text\"\n          placeholder=\"Search\"\n          value={query}\n          onChange={event => {\n            setQuery(event.target.value);\n            filter(event.target.value);\n          }}\n        />\n        <select\n          className=\"TodoList__select\"\n          onChange={event => filterTodos(event.target.value)}\n        >\n          <option value={todosTypeActions.SHOW_ALL}>\n            All\n          </option>\n          <option value={todosTypeActions.SHOW_ACTIVE}>\n            Active\n          </option>\n          <option value={todosTypeActions.SHOW_COMPLETED}>\n            Completed\n          </option>\n        </select>\n      </div>\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n            >\n              <label htmlFor=\"input\">\n                <input\n                  name=\"input\"\n                  type=\"checkbox\"\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div className=\"buttons-block\">\n                <button\n                  type=\"button\"\n                  className={classNames({\n                    button: true,\n                    'TodoList__user-button': true,\n                  })}\n                  onClick={() => dispatch(actionCreator.deleteTodo(todo.id))}\n                >\n                  Delete todo\n                </button>\n\n                <button\n                  className={classNames({\n                    button: true,\n                    'TodoList__user-button': true,\n                    'TodoList__user-button--selected': selectedUserId === todo.userId,\n                  })}\n                  type=\"button\"\n                  onClick={() => selectUserId(todo.userId)}\n                >\n                  {`User#${todo.userId.toString()}`}\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default connector(TodoList);\n","import React, { useState, useEffect } from 'react';\nimport { connect, ConnectedProps, useDispatch } from 'react-redux';\nimport './CurrentUser.scss';\nimport { RootState, getSelectedUserId } from '../../store';\nimport { clearUser } from '../../store/selectedUser';\nimport { getCurrentUser } from '../../api/api';\n\nconst mapState = (state: RootState) => {\n  return {\n    currentUserId: getSelectedUserId(state),\n  };\n};\n\nconst connector = connect(mapState);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst CurrentUser: React.FC<Props> = ({ currentUserId }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getCurrentUser(currentUserId).then(user => setCurrentUser(user));\n  }, [currentUserId]);\n\n  return currentUser && (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{currentUser.id ? `Selected user: ${currentUser.id}` : 'Could not find user'}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{currentUser.name ? currentUser.name : 'No information about this user'}</h3>\n      <p className=\"CurrentUser__email\">{currentUser.email}</p>\n      <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n      <button\n        className=\"CurrentUser__clear\"\n        type=\"button\"\n        onClick={() => dispatch(clearUser())}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n\nexport default connector(CurrentUser);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport TodoList from './components/TodoList/TodoList';\nimport CurrentUser from './components/CurrentUser/CurrentUser';\nimport { getSelectedUserId } from './store';\n\nconst App: React.FC = () => {\n  const selectedUserId = useSelector(getSelectedUserId);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nconst Root: React.FC = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}